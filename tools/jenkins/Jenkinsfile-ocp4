pipeline{
  agent any

  environment{
    DEBUG_OUTPUT = 'false'

    extJSHelper = '';
    NAMESPACE='bbe4c3'
    COMMON_NAMESPACE='75e61b'
    STAGING_ENV = 'Dev'
    TOOLS = 'bbe4c3-tools'
    DEV = 'bbe4c3-dev'
    TEST = 'bbe4c3-test'
    PROD = 'bbe4c3-prod'
    REPO_NAME = 'educ-grad-admin'
    TESTS_REPO_NAME = ''
    OWNER = 'bcgov'
    JOB_NAME = 'main'
    TAG = 'latest'
    TARGET_ENV = 'dev'
    TARGET_ENVIRONMENT = "${NAMESPACE}-${TARGET_ENV}"

    APP_NAME = 'educ-grad-admin'
    APP_DOMAIN = 'apps.silver.devops.gov.bc.ca'

    SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/main'
    SOURCE_REPO_REF = 'main'
    SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

    TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
    DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
    TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
    PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
    MIN_REPLICAS_FE = "1"
    MAX_REPLICAS_FE = "1"
    MIN_CPU_FE = "25m"
    MAX_CPU_FE = "50m"
    MIN_MEM_FE = "50Mi"
    MAX_MEM_FE = "100Mi"
    MIN_REPLICAS_BE = "1"
    MAX_REPLICAS_BE = "1"
    MIN_CPU_BE = "50m"
    MAX_CPU_BE = "100m"
    MIN_MEM_BE = "200Mi"
    MAX_MEM_BE = "250Mi"
    DC_URL_FRONTEND = "https://raw.githubusercontent.com/bcgov/EDUC-GRAD-ADMIN/main/tools/openshift/frontend-static.dc.ocp4.yaml"
  }
  options {
      buildDiscarder(logRotator(daysToKeepStr: '', numToKeepStr: '10'))
  }
  parameters {
      gitParameter(
        branch: '',
        branchFilter: ".*",
        defaultValue: "origin/main",
        description: '',
        listSize: '10',
        name: 'BRANCH_PARAM',
        quickFilterEnabled: false,
        selectedValue: 'DEFAULT',
        sortMode: 'ASCENDING_SMART',
        tagFilter: "BRANCH",
        type: 'PT_BRANCH_TAG')
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          SOURCE_REPO_REF = params.BRANCH_PARAM.substring(7)
          if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
    stage('Build'){
      steps{
        script {
          openshift.withCluster(){
            openshift.withProject(TOOLS){
              parallel(
                  Frontend: {
                    try {
                      echo "Building frontend..."
                      def bcFrontend = openshift.process('-f', 'https://raw.githubusercontent.com/bcgov/EDUC-GRAD-ADMIN/main/tools/openshift/frontend.bc.yaml', "REPO_NAME=${REPO_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")

                      openshift.apply(bcFrontend).narrow('bc').startBuild('-w').logs('-f')
                      openshift.tag("${REPO_NAME}-frontend:latest", "${REPO_NAME}-frontend:dev")

                      def bcFrontendStatic = openshift.process('-f', 'https://raw.githubusercontent.com/bcgov/EDUC-GRAD-ADMIN/main/tools/openshift/frontend-static.bc.yaml', "REPO_NAME=${REPO_NAME}", "NAMESPACE=${TOOLS}")
                      openshift.apply(bcFrontendStatic).narrow('bc').startBuild('-w').logs('-f')
                      openshift.tag("${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:dev")
                    } catch(e) {
                      echo "Frontend build failed"
                      throw e
                    }
                  }
              )
            }
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs...'
          script {
            openshift.withCluster() {
              openshift.withProject(TOOLS) {
                if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                  echo "DEBUG - Using project: ${openshift.project()}"
                } else {
                  def bcFrontend = openshift.selector('bc', "${REPO_NAME}-frontend-bc")
                  def bcFrontendStatic = openshift.selector('bc', "${REPO_NAME}-frontend-static-bc")
                  if(bcFrontend.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend..."
                    bcFrontend.delete()
                  }
                  if(bcFrontendStatic.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend-static..."
                    bcFrontendStatic.delete()
                  }
                }
              }
            }
          }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
	stage('Promote to DEV') {
      steps{
        deployStage('Dev', DEV, DEV_HOST_ROUTE, 'latest')
      }
      post{
        success{
          echo 'Deployment to Dev was successful'
        }
        failure{
          echo 'Deployment to Dev failed'
        }
      }
    }
   
  }
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv, String tag) {

  if (!stageEnv.equalsIgnoreCase('Dev')) {
    input("Deploy to ${projectEnv}?")
  }

  openshift.withCluster() {
    openshift.withProject("${projectEnv}") {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${REPO_NAME}-frontend-static:${tag}", "${REPO_NAME}-frontend-static:${tag}")
      def dcTemplate = openshift.process('-f',
        'https://raw.githubusercontent.com/bcgov/EDUC-GRAD-ADMIN/main/tools/openshift/frontend-static.dc.ocp4.yaml',
        "REPO_NAME=${REPO_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${tag}",
        "MIN_REPLICAS=${MIN_REPLICAS_FE}",
       "MAX_REPLICAS=${MAX_REPLICAS_FE}",
       "MIN_CPU=${MIN_CPU_FE}",
       "MAX_CPU=${MAX_CPU_FE}",
       "MIN_MEM=${MIN_MEM_FE}",
       "MAX_MEM=${MAX_MEM_BE}"
      )

      echo "Applying Deployment ${REPO_NAME}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
      openshift.selector('dc', "${APP_NAME}-frontend-dc").rollout().latest()
    }
  }
}
